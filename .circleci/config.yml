
version: 2.1

orbs:
    codecov: 'codecov/codecov@3.0.0'

.env_common: &env_common
    SHELL: '/bin/bash'

.env_composer: &env_composer
    COMPOSER_NO_INTERACTION: '1'
    COMPOSER_MEMORY_LIMIT: '-1'
    COMPOSER_CACHE_DIR: '/home/circleci/.cache/composer'

executors:
    php_min:
        resource_class: 'small'
        environment:
            <<: *env_common
            <<: *env_composer

        docker:
            -
                name: 'main'
                image: 'circleci/php:7.4'

    php_plus1:
        resource_class: 'small'
        environment:
            <<: *env_common
            <<: *env_composer

        docker:
            -
                name: 'main'
                image: 'circleci/php:8.0'

    php_plus2:
        resource_class: 'small'
        environment:
            <<: *env_common
            <<: *env_composer

        docker:
            -
                name: 'main'
                image: 'cimg/php:8.1'

    os_arch:
        resource_class: 'large'
        docker:
            -
                name: 'main'
                image: 'archlinux:base'
        environment:
            <<: *env_composer
            PATH: '/root/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

    os_fedora-35:
        resource_class: 'large'
        docker:
            -
                name: 'main'
                image: 'fedora:35'
        environment:
            <<: *env_composer

    os_opensuse-tumbleweed:
        resource_class: 'large'
        docker:
            -
                name: 'main'
                image: 'opensuse/tumbleweed:latest'
        environment:
            <<: *env_composer
            PATH: '/root/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

    os_ubuntu-21-10:
        resource_class: 'large'
        docker:
            -
                name: 'main'
                image: 'ubuntu:21.10'
        environment:
            <<: *env_composer
            PATH: '/root/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

commands:
    php_extension_pecl_install:
        description: 'Install PHP extension with pecl'
        parameters:
            ext_name:
                type: 'string'
            is_zend:
                type: 'string'
                default: 'false'
            package_names:
                type: 'string'
                default: ''
        steps:
            -
                run:
                    name: 'Install PHP extension with pecl – <<parameters.ext_name>>'
                    command: |
                        if php -m | grep '<<parameters.ext_name>>' ; then
                            echo 1>&2 'PHP extension <<parameters.ext_name>> is already enabled. No need to install'

                            exit 0
                        fi

                        if compgen -G '/usr/local/lib/php/extensions/*/<<parameters.ext_name>>.so' 1>/dev/null ; then
                            echo 1>&2 'PHP extension <<parameters.ext_name>> is already installed.'

                            exit 0
                        fi

                        if [[ '<<parameters.package_names>>' != '' ]] ; then
                            sudo apt-get update
                            sudo apt-get install -y <<parameters.package_names>>
                        fi

                        sudo pecl install '<<parameters.ext_name>>'
            -
                php_extension_enable:
                    ext_name: '<<parameters.ext_name>>'
                    is_zend: '<<parameters.is_zend>>'

    php_extension_bundled_install:
        parameters:
            ext_name:
                type: 'string'
            is_zend:
                type: 'string'
                default: 'false'
            package_names:
                type: 'string'
                default: ''
        steps:
            -
                run:
                    name: 'Compile bundled PHP extension – <<parameters.ext_name>>'
                    command: |
                        if php -m | grep '<<parameters.ext_name>>' ; then
                            echo 1>&2 'PHP extension <<parameters.ext_name>> is already enabled. No need to install'

                            exit 0
                        fi

                        if compgen -G '/usr/local/lib/php/extensions/*/<<parameters.ext_name>>.so' 1>/dev/null ; then
                            echo 1>&2 'PHP extension <<parameters.ext_name>> is already installed.'

                            exit 0
                        fi

                        if [[ '<<parameters.package_names>>' != '' ]] ; then
                            sudo apt-get update
                            sudo apt-get install -y <<parameters.package_names>>
                        fi

                        if command -v docker-php-ext-install ; then
                            sudo docker-php-ext-install '<<parameters.ext_name>>'

                            exit $?
                        fi

                        srcRoot='/usr/local/src'
                        phpVersion="$(php -r 'echo \PHP_VERSION;')"
                        phpSrcDir="${srcRoot}/php-${phpVersion}"

                        if [[ ! -d "${phpSrcDir}" ]] ; then
                            wget "https://www.php.net/distributions/php-${phpVersion}.tar.gz"
                            sudo tar xvzf "php-${phpVersion}.tar.gz" -C "${srcRoot}"
                            rm "php-${phpVersion}.tar.gz"
                        fi

                        cd "${srcRoot}/php-${phpVersion}/ext/<<parameters.ext_name>>"
                        sudo phpize
                        sudo ./configure
                        sudo make -j
                        sudo make install
            -
                php_extension_enable:
                    ext_name: '<<parameters.ext_name>>'
                    is_zend: '<<parameters.is_zend>>'

    php_extension_enable:
        parameters:
            ext_name:
                type: 'string'
            is_zend:
                type: 'string'
                default: 'false'
        steps:
            -
                run:
                    name: 'Enable PHP extension – <<parameters.ext_name>>'
                    command: |
                        if php -m | grep '<<parameters.ext_name>>' ; then
                            exit 0
                        fi

                        scanDir="$(php -i | grep --color=never --only-matching --perl-regexp '(?<=^Scan this dir for additional \.ini files => ).+')"

                        if [[ '<<parameters.is_zend>>' = 'true' ]] ; then
                            content='zend_extension=<<parameters.ext_name>>'
                        else
                            content='extension=<<parameters.ext_name>>'
                        fi

                        echo "${content}" | sudo tee --append "${scanDir}/<<parameters.ext_name>>.ini"

    php_extension_install_pcov:
        description: 'Install PHP extension – pcov'
        steps:
            -
                php_extension_pecl_install:
                    ext_name: 'pcov'

    php_extension_install_bz2:
        description: 'Install PHP extension – bz2'
        steps:
            -
                php_extension_bundled_install:
                    ext_name: 'bz2'
                    package_names: 'libbz2-dev'

    php_extension_install:
        description: 'Install required PHP extensions'
        steps:
            -
                restore_cache:
                    name: 'Install required PHP extensions - cache restore'
                    keys:
                        - 'php-extensions-{{ checksum "/usr/local/bin/php" }}-5'
            -
                run:
                    name: 'Install required PHP extensions – copy to final location'
                    command: |
                        extDir="$(php -i | grep --color=never --only-matching --perl-regexp '(?<=^extension_dir => ).+' | sed 's/ => .*//g')"
                        mkdir -p "${extDir}"
                        for extName in bz2 pcov ; do
                            if [[ -s ~/.cache/php/ext/${extName}.so ]] ; then
                                sudo cp ~/.cache/php/ext/${extName}.so "${extDir}/${extName}.so"
                            fi
                        done
            -
                php_extension_install_bz2: {}
            -
                php_extension_install_pcov: {}
            -
                run:
                    name: 'Install required PHP extensions – copy to cache location'
                    command: |
                        mkdir -p ~/.cache/php/ext
                        extDir="$(php -i | grep --color=never --only-matching --perl-regexp '(?<=^extension_dir => ).+' | sed 's/ => .*//g')"
                        for extName in bz2 pcov ; do
                            if [[ -s "${extDir}/${extName}.so" ]] ; then
                                cp "${extDir}/${extName}.so" ~/.cache/php/ext/${extName}.so
                            fi
                        done
            -
                save_cache:
                    name: 'PHP extensions - cache save'
                    key: 'php-extensions-{{ checksum "/usr/local/bin/php" }}-5'
                    paths:
                        - '~/.cache/php/ext/'

    composer_install:
        description: 'Install Composer dependencies with cache restore and save'
        parameters:
            arguments:
                type: 'string'
                default: ''
        steps:
            -
                restore_cache:
                    name: 'Composer install – cache restore'
                    keys:
                        - 'composer-{{ checksum "./composer.lock" }}-2'
            -
                run:
                    name: 'Composer install – do it'
                    command: >
                        composer install --no-progress <<parameters.arguments>>
            -
                save_cache:
                    name: 'Composer install – cache save'
                    key: 'composer-{{ checksum "./composer.lock" }}-2'
                    paths:
                        - '~/.cache/composer/'

    lint:
        description: 'Run linters'
        steps:
            -
                run:
                    name: 'Run linters'
                    command: |
                        "$(composer config bin-dir)/robo" -vv lint

    test:
        description: 'Run tests'
        steps:
            -
                run:
                    name: 'Codeception - unit'
                    command: |
                        "$(composer config bin-dir)/robo" test unit
            -
                codecov/upload:
                    flags: 'unit'
                    file: './tests/_log/machine/coverage/unit/coverage.xml'
#            -
#                run:
#                    name: 'Codeception - acceptance'
#                    command: |
#                        "$(composer config bin-dir)/robo" test acceptance
#            -
#                codecov/upload:
#                    flags: 'acceptance'
#                    file: './tests/_log/machine/coverage/acceptance/coverage.xml'
            -
                store_test_results:
                    name: 'Store test results for CircleCI UI'
                    path: './tests/_log/machine/junit'
            -
                store_artifacts:
                    name: 'Store test results as artifacts'
                    path: './tests/_log/machine/junit'

    install_composer:
        description: 'Install Composer executable'
        parameters:
            version:
                type: 'string'
                default: '2.2.6'
            install_dir:
                type: 'string'
                default: '${HOME}/bin'
            filename:
                type: 'string'
                default: 'composer'
        steps:
            -
                run:
                    name: 'Install Composer executable'
                    command: |-
                        mkdir -p "<<parameters.install_dir>>"
                        php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
                        php -r "if (hash_file('sha384', 'composer-setup.php') === '906a84df04cea2aa72f40b5f787e49f22d4c2f19492ac310e8cba5b96ac8b64115ac402c8cd292b8a03482574915d1a8') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"

                        php composer-setup.php \
                            --version='<<parameters.version>>' \
                            --install-dir="<<parameters.install_dir>>" \
                            --filename='<<parameters.filename>>'

                        php -r "unlink('composer-setup.php');"

    os_init:
        description: 'OS init'
        parameters:
            opsys:
                type: 'string'
        steps:
            -
                run:
                    name: 'OS init – <<parameters.opsys>> – install required packages'
                    command: |
                        case '<<parameters.opsys>>' in
                            ubuntu*)
                                apt-get update
                                apt-get install -y \
                                    git \
                                    tar
                                ;;

                            opensuse-tumbleweed)
                                zypper install --no-confirm \
                                    git \
                                    tar
                                ;;
                        esac
            -
                checkout: {}
            -
                run:
                    name: 'OS init – <<parameters.opsys>> – init.bash'
                    command: |
                        bash './tests/_data/Docker/<<parameters.opsys>>/init.bash'
            -
                install_composer: {}
            -
                composer_install:
                    arguments: '--no-dev'
            -
                run:
                    name: 'OS init – <<parameters.opsys>> – pmkr init:pmkr'
                    command: |
                        SHELL="${SHELL}" ./bin/pmkr init:pmkr --force


    pmkr_instance_install:
        description: 'pmkr instance:install'
        parameters:
            instance_name:
                type: 'string'

        steps:
            -
                run:
                    name: 'pmkr instance:install <<parameters.instance_name>> – install package dependencies'
                    command: |
                        eval "$(pmkr instance:dependency:package:list --format='code' --format-code='install-command' <<parameters.instance_name>>)"
            -
                run:
                    name: 'pmkr instance:install <<parameters.instance_name>>'
                    command: |
                        pmkr instance:install '<<parameters.instance_name>>'
            -
                run:
                    name: 'pmkr instance:install <<parameters.instance_name>> – test'
                    command: |
                        eval "$(pmkr --no-ansi instance:pick:this '<<parameters.instance_name>>')"
                        pmkr which
                        command -v php
                        php --version
                        php -m

jobs:
    build:
        executor: 'php_min'
        working_directory: '~/repo'
        steps:
            - 'php_extension_install'
            - 'checkout'
            - 'composer_install'

    # @todo PHPStan gives different results based on the actual PHP version.
    lint:
        executor: 'php_min'
        working_directory: '~/repo'
        steps:
            - 'php_extension_install'
            - 'checkout'
            - 'composer_install'
            - 'lint'
    test:
        parameters:
            executor:
                type: 'string'
        executor: '<<parameters.executor>>'
        working_directory: '~/repo'
        steps:
            - 'php_extension_install'
            - 'checkout'
            - 'composer_install'
            - 'test'

    pmkr_instance_install:
        parameters:
            opsys:
                type: 'string'
            instance_name:
                type: 'string'
        executor: 'os_<<parameters.opsys>>'
        working_directory: '~/project/pmkr/pmkr'
        steps:
            -
                os_init:
                    opsys: '<<parameters.opsys>>'
            -
                pmkr_instance_install:
                    instance_name: '<<parameters.instance_name>>'

workflows:
    lint_and_test:
        jobs:
            -
                build: {}
            -
                lint:
                    requires:
                        - 'build'
            -
                test:
                    name: 'test_<<matrix.executor>>'
                    requires:
                        - 'build'
                    matrix:
                        parameters:
                            executor:
                                - 'php_min'
                                - 'php_plus1'
                                - 'php_plus2'

    pmkr_instance_install:
        jobs:
            -
                pmkr_instance_install-hold:
                    name: 'pmkr_ii-<<matrix.opsys>>-<<matrix.instance_name>>-hold'
                    description: 'Approval will trigger other jobs.'
                    type: 'approval'
                    matrix:
                        parameters: &wf-pmkr_instance_install-parameters
                            opsys:
                                - 'arch'
#                                - 'fedora-35'
                                - 'opensuse-tumbleweed'
                                - 'ubuntu-21-10'
                            instance_name:
                                - '0704-nts'
                                - '0800-nts'
                                - '0801-nts'
            -
                pmkr_instance_install:
                    name: 'pmkr_ii-<<matrix.opsys>>-<<matrix.instance_name>>-execute'
                    requires:
                        - 'pmkr_ii-<<matrix.opsys>>-<<matrix.instance_name>>-hold'
                    matrix:
                        parameters: *wf-pmkr_instance_install-parameters
